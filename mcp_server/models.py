# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:46:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AirflowVersion(
    RootModel[constr(pattern=r'^[0-9a-z.]+$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[0-9a-z.]+$', min_length=1, max_length=32)


class CloudWatchLogGroupArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:logs:[a-z0-9\-]+:\d{12}:log-group:\w+',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[a-z]+)?:logs:[a-z0-9\-]+:\d{12}:log-group:\w+',
        min_length=1,
        max_length=1224,
    )


class ConfigKey(
    RootModel[
        constr(pattern=r'^[a-z]+([a-z0-9._]*[a-z0-9_]+)?$', min_length=1, max_length=64)
    ]
):
    root: constr(
        pattern=r'^[a-z]+([a-z0-9._]*[a-z0-9_]+)?$', min_length=1, max_length=64
    )


class ConfigValue(RootModel[SecretStr]):
    root: SecretStr


class CreateCliTokenRequest(BaseModel):
    pass


class CreateWebLoginTokenRequest(BaseModel):
    pass


class CreatedAt(RootModel[datetime]):
    root: datetime


class DeleteEnvironmentInput(BaseModel):
    pass


class DeleteEnvironmentOutput(BaseModel):
    pass


class Double(RootModel[float]):
    root: float


class EnvironmentArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:airflow:[a-z0-9\-]+:\d{12}:environment/\w+',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[a-z]+)?:airflow:[a-z0-9\-]+:\d{12}:environment/\w+',
        min_length=1,
        max_length=1224,
    )


class EnvironmentClass(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class EnvironmentName(
    RootModel[constr(pattern=r'^[a-zA-Z][0-9a-zA-Z-_]*$', min_length=1, max_length=80)]
):
    root: constr(pattern=r'^[a-zA-Z][0-9a-zA-Z-_]*$', min_length=1, max_length=80)


class EnvironmentStatus(Enum):
    CREATING = 'CREATING'
    CREATE_FAILED = 'CREATE_FAILED'
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    UNAVAILABLE = 'UNAVAILABLE'
    UPDATE_FAILED = 'UPDATE_FAILED'


class ErrorCode(RootModel[str]):
    root: str


class ErrorMessage(RootModel[constr(pattern=r'^.+$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^.+$', min_length=1, max_length=1024)


class GetEnvironmentInput(BaseModel):
    pass


class Hostname(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$',
        min_length=1,
        max_length=255,
    )


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[a-z]+)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=1,
        max_length=1224,
    )


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class KmsKey(
    RootModel[
        constr(
            pattern=r'^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?key\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?alias/.+)$',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?key\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?alias/.+)$',
        min_length=1,
        max_length=1224,
    )


class ListEnvironmentsInput(BaseModel):
    pass


class ListEnvironmentsInputMaxResultsInteger(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class ListTagsForResourceInput(BaseModel):
    pass


class LoggingEnabled(RootModel[bool]):
    root: bool


class LoggingLevel(Enum):
    CRITICAL = 'CRITICAL'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'
    DEBUG = 'DEBUG'


class MaxWorkers(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MinWorkers(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ModuleLoggingConfiguration(BaseModel):
    CloudWatchLogGroupArn_1: Optional[CloudWatchLogGroupArn] = Field(
        None, alias='CloudWatchLogGroupArn'
    )
    Enabled: Optional[LoggingEnabled] = None
    LogLevel: Optional[LoggingLevel] = None


class ModuleLoggingConfigurationInput(BaseModel):
    Enabled: LoggingEnabled
    LogLevel: LoggingLevel


class NextToken(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class PublishMetricsOutput(BaseModel):
    pass


class RelativePath(RootModel[constr(pattern=r'.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1024)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3BucketArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$', min_length=1, max_length=1224
    )


class S3ObjectVersion(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Schedulers(RootModel[conint(le=5)]):
    root: conint(le=5)


class SecurityGroupId(
    RootModel[constr(pattern=r'^sg-[a-zA-Z0-9\-._]+$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^sg-[a-zA-Z0-9\-._]+$', min_length=1, max_length=1024)


class SecurityGroupList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5, min_length=1)


class StatisticSet(BaseModel):
    Maximum: Optional[Double] = None
    Minimum: Optional[Double] = None
    SampleCount: Optional[Integer] = None
    Sum: Optional[Double] = None


class String(RootModel[str]):
    root: str


class SubnetId(
    RootModel[
        constr(pattern=r'^subnet-[a-zA-Z0-9\-._]+$', min_length=1, max_length=1024)
    ]
):
    root: constr(pattern=r'^subnet-[a-zA-Z0-9\-._]+$', min_length=1, max_length=1024)


class SubnetList(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=2, min_length=2)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagResourceOutput(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256
    )


class Timestamp(RootModel[datetime]):
    root: datetime


class Token(RootModel[SecretStr]):
    root: SecretStr


class Unit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class UntagResourceInput(BaseModel):
    pass


class UntagResourceOutput(BaseModel):
    pass


class UpdateCreatedAt(RootModel[datetime]):
    root: datetime


class UpdateEnvironmentOutput(BaseModel):
    Arn: Optional[EnvironmentArn] = None


class UpdateError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')


class UpdateNetworkConfigurationInput(BaseModel):
    SecurityGroupIds: SecurityGroupList


class UpdateSource(RootModel[constr(pattern=r'^.+$', min_length=1, max_length=256)]):
    root: constr(pattern=r'^.+$', min_length=1, max_length=256)


class UpdateStatus(Enum):
    SUCCESS = 'SUCCESS'
    PENDING = 'PENDING'
    FAILED = 'FAILED'


class ValidationException(RootModel[Any]):
    root: Any


class WebserverAccessMode(Enum):
    PRIVATE_ONLY = 'PRIVATE_ONLY'
    PUBLIC_ONLY = 'PUBLIC_ONLY'


class WebserverUrl(
    RootModel[constr(pattern=r'^https://.+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^https://.+$', min_length=1, max_length=256)


class WeeklyMaintenanceWindowStart(
    RootModel[
        constr(
            pattern=r'(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)',
            min_length=1,
            max_length=9,
        )
    ]
):
    root: constr(
        pattern=r'(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)',
        min_length=1,
        max_length=9,
    )


class LoggingConfiguration1(BaseModel):
    DagProcessingLogs: Optional[ModuleLoggingConfigurationInput] = None
    SchedulerLogs: Optional[ModuleLoggingConfigurationInput] = None
    TaskLogs: Optional[ModuleLoggingConfigurationInput] = None
    WebserverLogs: Optional[ModuleLoggingConfigurationInput] = None
    WorkerLogs: Optional[ModuleLoggingConfigurationInput] = None


class NetworkConfiguration(BaseModel):
    SecurityGroupIds: Optional[SecurityGroupList] = None


class EnvironmentsNamePatchRequest(BaseModel):
    AirflowConfigurationOptions: Optional[Dict[str, ConfigValue]] = Field(
        None,
        description='A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.',
    )
    AirflowVersion: Optional[
        constr(pattern=r'^[0-9a-z.]+$', min_length=1, max_length=32)
    ] = Field(
        None,
        description='The Apache Airflow version for your environment. If no value is specified, defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>.',
    )
    DagS3Path: Optional[constr(pattern=r'.*', min_length=1, max_length=1024)] = Field(
        None,
        description='The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.',
    )
    EnvironmentClass: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.',
    )
    ExecutionRoleArn: Optional[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=1,
            max_length=1224,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.',
    )
    LoggingConfiguration: Optional[LoggingConfiguration1] = Field(
        None,
        description='Defines the Apache Airflow log types to send to CloudWatch Logs.',
    )
    MaxWorkers: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.',
    )
    MinWorkers: Optional[conint(ge=1)] = Field(
        None,
        description='The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.',
    )
    NetworkConfiguration_1: Optional[NetworkConfiguration] = Field(
        None,
        alias='NetworkConfiguration',
        description='Defines the VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.',
    )
    PluginsS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a <code>plugins.zip</code> file is updated. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.',
    )
    PluginsS3Path: Optional[constr(pattern=r'.*', min_length=1, max_length=1024)] = (
        Field(
            None,
            description='The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the plugins.zip version is required. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.',
        )
    )
    RequirementsS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = (
        Field(
            None,
            description='The version of the requirements.txt file on your Amazon S3 bucket. You must specify a version each time a <code>requirements.txt</code> file is updated. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.',
        )
    )
    RequirementsS3Path: Optional[
        constr(pattern=r'.*', min_length=1, max_length=1024)
    ] = Field(
        None,
        description='The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a file version is required. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.',
    )
    Schedulers: Optional[conint(le=5)] = Field(
        None,
        description='The number of Apache Airflow schedulers to run in your Amazon MWAA environment.',
    )
    SourceBucketArn: Optional[
        constr(
            pattern=r'^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$',
            min_length=1,
            max_length=1224,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.',
    )
    StartupScriptS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = (
        Field(
            None,
            description='<p> The version of the startup shell script in your Amazon S3 bucket. You must specify the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">version ID</a> that Amazon S3 assigns to the file every time you update the script. </p> <p> Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: </p> <p> <code>3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo</code> </p> <p> For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html">Using a startup script</a>. </p>',
        )
    )
    StartupScriptS3Path: Optional[
        constr(pattern=r'.*', min_length=1, max_length=1024)
    ] = Field(
        None,
        description='<p>The relative path to the startup shell script in your Amazon S3 bucket. For example, <code>s3://mwaa-environment/startup.sh</code>.</p> <p> Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html">Using a startup script</a>. </p>',
    )
    WebserverAccessMode_1: Optional[WebserverAccessMode] = Field(
        None,
        alias='WebserverAccessMode',
        description='The Apache Airflow <i>Web server</i> access mode. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.',
    )
    WeeklyMaintenanceWindowStart: Optional[
        constr(
            pattern=r'(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)',
            min_length=1,
            max_length=9,
        )
    ] = Field(
        None,
        description='The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.',
    )


class NetworkConfiguration2(BaseModel):
    SecurityGroupIds: Optional[SecurityGroupList] = None
    SubnetIds: Optional[SubnetList] = None


class EnvironmentsNamePutRequest(BaseModel):
    AirflowConfigurationOptions: Optional[Dict[str, ConfigValue]] = Field(
        None,
        description='A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.',
    )
    AirflowVersion: Optional[
        constr(pattern=r'^[0-9a-z.]+$', min_length=1, max_length=32)
    ] = Field(
        None,
        description='The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html">Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (MWAA)</a>.',
    )
    DagS3Path: constr(pattern=r'.*', min_length=1, max_length=1024) = Field(
        ...,
        description='The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.',
    )
    EnvironmentClass: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.',
    )
    ExecutionRoleArn: constr(
        pattern=r'^arn:aws(-[a-z]+)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=1,
        max_length=1224,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.',
    )
    KmsKey: Optional[
        constr(
            pattern=r'^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?key\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?alias/.+)$',
            min_length=1,
            max_length=1224,
        )
    ] = Field(
        None,
        description='The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html">Create an Amazon MWAA environment</a>.',
    )
    LoggingConfiguration: Optional[LoggingConfiguration1] = Field(
        None,
        description='Defines the Apache Airflow log types to send to CloudWatch Logs.',
    )
    MaxWorkers: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.',
    )
    MinWorkers: Optional[conint(ge=1)] = Field(
        None,
        description='The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.',
    )
    NetworkConfiguration: NetworkConfiguration2 = Field(
        ...,
        description='Describes the VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.',
    )
    PluginsS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.',
    )
    PluginsS3Path: Optional[constr(pattern=r'.*', min_length=1, max_length=1024)] = (
        Field(
            None,
            description='The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the <code>plugins.zip</code> version is required. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.',
        )
    )
    RequirementsS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = (
        Field(
            None,
            description='The version of the <code>requirements.txt</code> file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.',
        )
    )
    RequirementsS3Path: Optional[
        constr(pattern=r'.*', min_length=1, max_length=1024)
    ] = Field(
        None,
        description='The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a version is required. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.',
    )
    Schedulers: Optional[conint(le=5)] = Field(
        None,
        description='<p>The number of Apache Airflow schedulers to run in your environment. Valid values:</p> <ul> <li> <p>v2 - Accepts between 2 to 5. Defaults to 2.</p> </li> <li> <p>v1 - Accepts 1.</p> </li> </ul>',
    )
    SourceBucketArn: constr(
        pattern=r'^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$', min_length=1, max_length=1224
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.',
    )
    StartupScriptS3ObjectVersion: Optional[constr(min_length=1, max_length=1024)] = (
        Field(
            None,
            description='<p>The version of the startup shell script in your Amazon S3 bucket. You must specify the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">version ID</a> that Amazon S3 assigns to the file every time you update the script. </p> <p> Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: </p> <p> <code>3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo</code> </p> <p> For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html">Using a startup script</a>. </p>',
        )
    )
    StartupScriptS3Path: Optional[
        constr(pattern=r'.*', min_length=1, max_length=1024)
    ] = Field(
        None,
        description='<p>The relative path to the startup shell script in your Amazon S3 bucket. For example, <code>s3://mwaa-environment/startup.sh</code>.</p> <p> Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html">Using a startup script</a>. </p>',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The key-value tag pairs you want to associate to your environment. For example, <code>"Environment": "Staging"</code>. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.',
    )
    WebserverAccessMode_1: Optional[WebserverAccessMode] = Field(
        None,
        alias='WebserverAccessMode',
        description='The Apache Airflow <i>Web server</i> access mode. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.',
    )
    WeeklyMaintenanceWindowStart: Optional[
        constr(
            pattern=r'(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)',
            min_length=1,
            max_length=9,
        )
    ] = Field(
        None,
        description='The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.',
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ...,
        description='The key-value tag pairs you want to associate to your environment. For example, <code>"Environment": "Staging"</code>. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class AirflowConfigurationOptions(RootModel[Optional[Dict[str, ConfigValue]]]):
    root: Optional[Dict[str, ConfigValue]] = None


class CreateCliTokenResponse(BaseModel):
    CliToken: Optional[Token] = None
    WebServerHostname: Optional[Hostname] = None


class CreateEnvironmentOutput(BaseModel):
    Arn: Optional[EnvironmentArn] = None


class CreateWebLoginTokenResponse(BaseModel):
    WebServerHostname: Optional[Hostname] = None
    WebToken: Optional[Token] = None


class Dimension(BaseModel):
    Name: String
    Value: String


class Dimensions(RootModel[List[Dimension]]):
    root: List[Dimension]


class EnvironmentList(RootModel[List[EnvironmentName]]):
    root: List[EnvironmentName]


class LastUpdate(BaseModel):
    CreatedAt: Optional[UpdateCreatedAt] = None
    Error: Optional[UpdateError] = None
    Source: Optional[UpdateSource] = None
    Status: Optional[UpdateStatus] = None


class ListEnvironmentsOutput(BaseModel):
    Environments: EnvironmentList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class LoggingConfiguration(BaseModel):
    DagProcessingLogs: Optional[ModuleLoggingConfiguration] = None
    SchedulerLogs: Optional[ModuleLoggingConfiguration] = None
    TaskLogs: Optional[ModuleLoggingConfiguration] = None
    WebserverLogs: Optional[ModuleLoggingConfiguration] = None
    WorkerLogs: Optional[ModuleLoggingConfiguration] = None


class LoggingConfigurationInput(BaseModel):
    DagProcessingLogs: Optional[ModuleLoggingConfigurationInput] = None
    SchedulerLogs: Optional[ModuleLoggingConfigurationInput] = None
    TaskLogs: Optional[ModuleLoggingConfigurationInput] = None
    WebserverLogs: Optional[ModuleLoggingConfigurationInput] = None
    WorkerLogs: Optional[ModuleLoggingConfigurationInput] = None


class MetricDatum(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricName: String
    StatisticValues: Optional[StatisticSet] = None
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')
    Unit_1: Optional[Unit] = Field(None, alias='Unit')
    Value: Optional[Double] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceInput(BaseModel):
    Tags: TagMap


class UpdateEnvironmentInput(BaseModel):
    AirflowConfigurationOptions_1: Optional[AirflowConfigurationOptions] = Field(
        None, alias='AirflowConfigurationOptions'
    )
    AirflowVersion_1: Optional[AirflowVersion] = Field(None, alias='AirflowVersion')
    DagS3Path: Optional[RelativePath] = None
    EnvironmentClass_1: Optional[EnvironmentClass] = Field(
        None, alias='EnvironmentClass'
    )
    ExecutionRoleArn: Optional[IamRoleArn] = None
    LoggingConfiguration: Optional[LoggingConfigurationInput] = None
    MaxWorkers_1: Optional[MaxWorkers] = Field(None, alias='MaxWorkers')
    MinWorkers_1: Optional[MinWorkers] = Field(None, alias='MinWorkers')
    NetworkConfiguration: Optional[UpdateNetworkConfigurationInput] = None
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers_1: Optional[Schedulers] = Field(None, alias='Schedulers')
    SourceBucketArn: Optional[S3BucketArn] = None
    StartupScriptS3ObjectVersion: Optional[S3ObjectVersion] = None
    StartupScriptS3Path: Optional[RelativePath] = None
    WebserverAccessMode_1: Optional[WebserverAccessMode] = Field(
        None, alias='WebserverAccessMode'
    )
    WeeklyMaintenanceWindowStart_1: Optional[WeeklyMaintenanceWindowStart] = Field(
        None, alias='WeeklyMaintenanceWindowStart'
    )


class MetricsEnvironmentsEnvironmentNamePostRequest(BaseModel):
    MetricData: List[MetricDatum] = Field(
        ...,
        description=' <b>Internal only</b>. Publishes metrics to Amazon CloudWatch. To learn more about the metrics published to Amazon CloudWatch, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html">Amazon MWAA performance metrics in Amazon CloudWatch</a>.',
    )


class CreateEnvironmentInput(BaseModel):
    AirflowConfigurationOptions_1: Optional[AirflowConfigurationOptions] = Field(
        None, alias='AirflowConfigurationOptions'
    )
    AirflowVersion_1: Optional[AirflowVersion] = Field(None, alias='AirflowVersion')
    DagS3Path: RelativePath
    EnvironmentClass_1: Optional[EnvironmentClass] = Field(
        None, alias='EnvironmentClass'
    )
    ExecutionRoleArn: IamRoleArn
    KmsKey_1: Optional[KmsKey] = Field(None, alias='KmsKey')
    LoggingConfiguration: Optional[LoggingConfigurationInput] = None
    MaxWorkers_1: Optional[MaxWorkers] = Field(None, alias='MaxWorkers')
    MinWorkers_1: Optional[MinWorkers] = Field(None, alias='MinWorkers')
    NetworkConfiguration: NetworkConfiguration2
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers_1: Optional[Schedulers] = Field(None, alias='Schedulers')
    SourceBucketArn: S3BucketArn
    StartupScriptS3ObjectVersion: Optional[S3ObjectVersion] = None
    StartupScriptS3Path: Optional[RelativePath] = None
    Tags: Optional[TagMap] = None
    WebserverAccessMode_1: Optional[WebserverAccessMode] = Field(
        None, alias='WebserverAccessMode'
    )
    WeeklyMaintenanceWindowStart_1: Optional[WeeklyMaintenanceWindowStart] = Field(
        None, alias='WeeklyMaintenanceWindowStart'
    )


class Environment(BaseModel):
    AirflowConfigurationOptions_1: Optional[AirflowConfigurationOptions] = Field(
        None, alias='AirflowConfigurationOptions'
    )
    AirflowVersion_1: Optional[AirflowVersion] = Field(None, alias='AirflowVersion')
    Arn: Optional[EnvironmentArn] = None
    CreatedAt_1: Optional[CreatedAt] = Field(None, alias='CreatedAt')
    DagS3Path: Optional[RelativePath] = None
    EnvironmentClass_1: Optional[EnvironmentClass] = Field(
        None, alias='EnvironmentClass'
    )
    ExecutionRoleArn: Optional[IamRoleArn] = None
    KmsKey_1: Optional[KmsKey] = Field(None, alias='KmsKey')
    LastUpdate_1: Optional[LastUpdate] = Field(None, alias='LastUpdate')
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )
    MaxWorkers_1: Optional[MaxWorkers] = Field(None, alias='MaxWorkers')
    MinWorkers_1: Optional[MinWorkers] = Field(None, alias='MinWorkers')
    Name: Optional[EnvironmentName] = None
    NetworkConfiguration: Optional[NetworkConfiguration2] = None
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers_1: Optional[Schedulers] = Field(None, alias='Schedulers')
    ServiceRoleArn: Optional[IamRoleArn] = None
    SourceBucketArn: Optional[S3BucketArn] = None
    StartupScriptS3ObjectVersion: Optional[String] = None
    StartupScriptS3Path: Optional[String] = None
    Status: Optional[EnvironmentStatus] = None
    Tags: Optional[TagMap] = None
    WebserverAccessMode_1: Optional[WebserverAccessMode] = Field(
        None, alias='WebserverAccessMode'
    )
    WebserverUrl_1: Optional[WebserverUrl] = Field(None, alias='WebserverUrl')
    WeeklyMaintenanceWindowStart_1: Optional[WeeklyMaintenanceWindowStart] = Field(
        None, alias='WeeklyMaintenanceWindowStart'
    )


class GetEnvironmentOutput(BaseModel):
    Environment_1: Optional[Environment] = Field(None, alias='Environment')


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagMap] = None


class MetricData(RootModel[List[MetricDatum]]):
    root: List[MetricDatum]


class PublishMetricsInput(BaseModel):
    MetricData_1: MetricData = Field(..., alias='MetricData')
